Topics:

Functions
AVG()
COUNT()
MAX()
MIN()
SUM()
CHARINDEX()
CONCATE()
LTRIM()
RTRIM()
LOWER()
UPPER()
REPLACE()
REVERSE()
SUBSTRING()
LEN()
ROUND()
FORMAT()
CEILING()
FLOOR()
RAND()
ABS()
YEAR()
MONTH()
DATEADD()
DATEDIFF()
DATEPART()
GETDATE()

Clauses
GROUP BY
HAVING

Task Assignment :
1. Practice all Aggregate Functions in tables created by you.(Make query of each)
2. Use Day-3 Tables and perform given question in "Task Question" text file

Create a file that contains all the queries which you have executed and are properly working.
That file will be uploaded for submission.

Note: DO NOT COPY PASTE from others.
------------
Aggregate Functions,Clauses
Functions and Clauses 
AVG()  
COUNT() 
MAX()  
MIN()  
SUM()  
CHARINDEX()
CONCATE()
LTRIM()
RTRIM()
LOWER()
UPPER()
REPLACE()
REVERSE()
SUBSTRING()
LEN() 
ROUND() 
FORMAT()
CEILING()
FLOOR()
RAND()
ABS()
YEAR()
MONTH()
DATEADD()
DATEDIFF()
DATEPART()
GETDATE()	
https://www.w3schools.com/sql/sql_ref_sqlserver.asp	
---
ANS
--create databse parctice2
CREATE DATABASE PRACTICE2


--1)CREATE TABLE SALARY
CREATE TABLE Salary
(
SalaryId INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
AnnualIncome DECIMAL(18,2),
Loans DECIMAL(18,2),
Insurance DECIMAL(18,2),
MonthlyIncome DECIMAL(18,2),
OnHandIncome DECIMAL(18,2)
);

SELECT * FROM Salary;

INSERT INTO Salary VALUES
(500000,300000,50000,41666.6667,36000),
(450000,350000,45000,37500,32000),
(400000,400000,null,33333.3333,28000),
(350000,450000,35000,29166.6667,24000),
(400000,400000,null,33333.3333,28000),
(400000,400000,null,33333.3333,28000),
(350000,450000,35000,29166.6667,24000);

SELECT * FROM Salary;

--AGGREGATE FUNCTIONS(MAX,MIN,AVG,COUNT,SUM)
SELECT MAX(MonthlyIncome) AS Minimun_Monthlyincome FROM Salary;
SELECT MIN(MonthlyIncome) AS Maxmum_Monthlyincome FROM Salary;
SELECT SUM(MonthlyIncome) AS Sum_Of_Monthlyincome FROM Salary;
SELECT AVG(MonthlyIncome) AS Average_Of_Monthlyincome FROM Salary;
SELECT COUNT(MonthlyIncome) AS Count_OF_Monthlyincome FROM Salary;


SELECT MAX(AnnualIncome) AS Minimun_AnnualIncome FROM Salary;
SELECT MIN(AnnualIncome) AS Maxmum_AnnualIncome FROM Salary;
SELECT SUM(AnnualIncome) AS Sum_Of_AnnualIncome FROM Salary;
SELECT AVG(AnnualIncome) AS Average_Of_AnnualIncome FROM Salary;
SELECT COUNT(AnnualIncome) AS Count_OF_AnnualIncome FROM Salary;

--ROUND
SELECT ROUND(MonthlyIncome,0) AS RoundValue FROM Salary;
SELECT ROUND(MonthlyIncome,1) AS RoundValue FROM Salary;
SELECT ROUND(MonthlyIncome,2) AS RoundValue FROM Salary;
SELECT ROUND(MonthlyIncome,3) AS RoundValue FROM Salary;

SELECT ROUND(OnHandIncome,0) AS RoundValue FROM Salary;
SELECT ROUND(OnHandIncome,1) AS RoundValue FROM Salary;
SELECT ROUND(OnHandIncome,2) AS RoundValue FROM Salary;
SELECT ROUND(OnHandIncome,3) AS RoundValue FROM Salary;

--ABS
SELECT ABS(OnHandIncome) AS AbsoluteValue FROM Salary;
SELECT ABS(MonthlyIncome) AS AbsoluteValue FROM Salary;

--CEILING
SELECT CEILING(MonthlyIncome) AS CeilValue FROM Salary;
SELECT CEILING(OnHandIncome) AS CeilValue FROM Salary;
SELECT CEILING(AnnualIncome) AS CeilValue FROM Salary;


--FLOOR
SELECT FLOOR(MonthlyIncome) AS FLOORValue FROM Salary;
SELECT FLOOR(OnHandIncome) AS FLOORValue FROM Salary;
SELECT FLOOR(AnnualIncome) AS FLOORValue FROM Salary;


--2)CREATE TABLE EMPLOYEE
CREATE TABLE NewEmployee
(
EmployeeId INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
FirstName VARCHAR(100) NOT NULL,
MiddleName VARCHAR(100) NOT NULL,
LastName VARCHAR(100) NOT NULL,
BirthDate DATE,
Gender TINYINT, --1 FOR MALE AND 2 FOR FEMALE
Address VARCHAR(300) NOT NULL,
DateOfJoin DATETIME
);

SELECT * FROM NewEmployee;

INSERT INTO NewEmployee VALUES
('sandip','sanjaybhai','parmar','1998-06-16',1,'ahmedabad','2020-01-01'),
('kabir','bhaumitbhai','panchal','1995-09-23',1,'surat','2015-05-10'),
('kalpna','parbhubhai','pitroda','1971-04-02',2,'rajkot','2000-01-15'),
('tilak','kamleshbhai','dave','2000-09-11',1,'kalol','2020-01-01'),
('janvi','ketanbhai','padhriya','1999-08-24',2,'jamnagar','2020-01-01'),
('kinjal','devendrabhai','pitroda','1997-05-05',2,'rajkot','2020-01-10'),
('rajan','parekhbhai','patel','1989-05-10',1,'new york','2020-01-10');

SELECT * FROM NewEmployee;

--CHARINDEX
SELECT CHARINDEX('a',FirstName) AS a_charindex FROM NewEmployee;
SELECT CHARINDEX('a',MiddleName) AS a_charindex FROM NewEmployee;
SELECT CHARINDEX('p',LastName) AS p_charindex FROM NewEmployee;

--CONCATE
SELECT CONCAT(FirstName,LastName) AS FullName FROM NewEmployee;
SELECT CONCAT(FirstName,MiddleName,LastName) AS WholeName FROM NewEmployee;

--LOWER
SELECT LOWER(FirstName) AS LowerCase FROM NewEmployee;
SELECT LOWER(MiddleName) AS LowerCase FROM NewEmployee;
SELECT LOWER(LastName) AS LowerCase FROM NewEmployee;

--UPPER
SELECT UPPER(FirstName) AS UpperCase FROM NewEmployee;
SELECT UPPER(MiddleName) AS UpperCase FROM NewEmployee;
SELECT UPPER(LastName) AS UpperCase FROM NewEmployee;

--REPLACE
SELECT REPLACE(Address,'A','S') FROM NewEmployee;
SELECT REPLACE(FirstName,'A','D') FROM NewEmployee;

--REVERSE
SELECT REVERSE(FirstName) AS Reverse FROM NewEmployee;
SELECT REVERSE(MiddleName) AS Reverse FROM NewEmployee;
SELECT REVERSE(LastName) AS Reverse FROM NewEmployee;

--LEN(LENGTH)
SELECT LEN(FirstName)AS TotalLength_FNAME FROM NewEmployee;
SELECT LEN(MiddleName)AS TotalLength_MNAME FROM NewEmployee;
SELECT LEN(LastName)AS TotalLength_LNAME FROM NewEmployee;

--SUBSTRING
SELECT SUBSTRING(FirstName,1, 3) AS ExtractString FROM NewEmployee;
SELECT SUBSTRING(FirstName,3, 8) AS ExtractString FROM NewEmployee;
SELECT SUBSTRING(MiddleName,1, 3) AS ExtractString FROM NewEmployee;
SELECT SUBSTRING(MiddleName,3, 8) AS ExtractString FROM NewEmployee;

--FORMATE

DECLARE @d DATETIME = '12/01/2018';
SELECT FORMAT (@d, 'd', 'en-US') AS 'US English Result',
       FORMAT (@d, 'd', 'no') AS 'Norwegian Result',
       FORMAT (@d, 'd', 'zu') AS 'Zulu Result';

SELECT FORMAT(02041971, '##-##-####');
SELECT FORMAT(19980616,'####/##/##');

--RAND(RANDOM)
SELECT RAND();



--3)CREATE TABLE NEWPROJECT
CREATE TABLE NewProject
(
ProjectId INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
ProjectName VARCHAR(100) NOT NULL,
ClientName VARCHAR(100) NOT NULL,
StartDate DATETIME,
EndDate DATETIME2,
Status TINYINT --1 FOR COMPLETED AND 2 FOR INPROGRESS 3 FOR PRNDING
);

SELECT * FROM NewProject;

INSERT INTO NewProject VALUES
('EMPLOYEE MANAGEMENT SYSTEM','ishan chavda','2018-01-10','2019-06-10',1),
('CATERING SYSTEM','dhara chavda','2019-05-20','2020-10-10',1),
('ATTENDANCE SYSTEM','himanshu pranami','2018-10-22','2020-10-20',2),
('EXHIBITION MANAGEMENT SYSTEM','hardik sanghvi','2017-05-06','2019-05-03',3),
('LEARNING MANAGEMNT SYSTEM','mayur fefar','2019-01-01','2020-01-01',2),
('HOTEL MANAGEMENT SYSTEM','sanjay parmar','2017-10-05','2019-05-20',2),
('ONLINE SHOPPING SYSTEM','kalpana panchal','2019-01-10','2020-01-10',1);

SELECT * FROM NewProject;

--LTRIM
SELECT LTRIM(ProjectName)AS LTRIM FROM NewProject;
SELECT LTRIM(ClientName)AS LTRIM FROM NewProject;

--RTRIM
SELECT RTRIM(ProjectName)AS RTRIM FROM NewProject;
SELECT RTRIM(ClientName)AS RTRIM FROM NewProject;

--DATE FUNCTION(YEAR,MONTH,DATE,DATEADD,DATEDIFF,DATEPART,GETDATE)
--YEAR
SELECT YEAR(StartDate) FROM NewProject;
SELECT YEAR(EndDate) FROM NewProject;

--MONTH
SELECT MONTH(StartDate) FROM NewProject;
SELECT MONTH(EndDate) FROM NewProject;

--DAY
SELECT DAY(StartDate) FROM NewProject;
SELECT DAY(EndDate) FROM NewProject;

--DATEADD
SELECT DATEADD(YEAR, 1, StartDate) AS DateAdd FROM NewProject;
SELECT DATEADD(YEAR, 1, EndDate) AS DateAdd FROM NewProject;

--DATEPART
--BY YEAR
SELECT DATEPART(YEAR, StartDate) AS DatePartInt FROM NewProject;
SELECT DATEPART(YEAR, EndDate) AS DatePartInt FROM NewProject;

--BY MONTH
SELECT DATEPART(MONTH, StartDate) AS DatePartInt FROM NewProject;
SELECT DATEPART(MONTH, EndDate) AS DatePartInt FROM NewProject;

--BY DAY
SELECT DATEPART(DAY, StartDate) AS DatePartInt FROM NewProject;
SELECT DATEPART(DAY, EndDate) AS DatePartInt FROM NewProject;

--DATEDIFF 
--BY YEAR
SELECT DATEDIFF(YEAR, StartDate, EndDate) AS DateDiff FROM NewProject;

--BY MONTH
SELECT DATEDIFF(MONTH, StartDate, EndDate) AS DateDiff FROM NewProject;

--BY DAY
SELECT DATEDIFF(DAY, StartDate, EndDate) AS DateDiff FROM NewProject;

--GETDATE
SELECT GETDATE();

GO
-------------
--DATABASE SQL_TASK3
CREATE DATABASE sql_task3

--1)DEPARTMENT
CREATE TABLE Department(
DepartmentId INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
DepartmentName VARCHAR(100) NOT NULL
);

SELECT * FROM Department;

INSERT INTO Department VALUES
('PHP'),
('ANDROID'),
('.NET'),
('JAVA'),
('IOS'),
('angular'),
('Reactjs');

SELECT * FROM Department;
--Drop table Department;

--2)DESIGNATION
CREATE TABLE Designation(
DesignationId INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
DesignationName VARCHAR(100) NOT NULL
);

SELECT * FROM Designation;


INSERT INTO Designation VALUES
('CEO'),
('Project Manager'),
('HR'),
('Employee'),
('Trainee'),
('Android developer'),
('developer');

SELECT * FROM Designation;
--Drop table Designation;

--3)EMPLOYEE
CREATE TABLE Employee
(
EmployeeId INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
FirstName VARCHAR(100) NOT NULL,
MiddleName VARCHAR(100) NOT NULL,
LastName VARCHAR(100) NOT NULL,
BirthDate DATE,
Gender TINYINT, --1 FOR MALE AND 2 FOR FEMALE
Address VARCHAR(300) NOT NULL,
DateOfJoin DATETIME,
DepartmentId INT FOREIGN KEY REFERENCES Department(DepartmentId),
DesignationId INT FOREIGN KEY REFERENCES Designation(DesignationId)
);

SELECT * FROM Employee;

INSERT INTO Employee VALUES
('sandip','sanjaybhai','parmar','1998-06-16',1,'ahmedabad','2020-01-01',1,1),
('kabir','bhaumitbhai','panchal','1995-09-23',1,'surat','2015-05-10',2,2),
('kalpna','parbhubhai','pitroda','1971-04-02',2,'rajkot','2000-01-15',3,3),
('tilak','kamleshbhai','dave','2000-09-11',1,'kalol','2020-01-01',4,4),
('janvi','ketanbhai','padhriya','1999-08-24',2,'jamnagar','2020-01-01',5,5),
('kinjal','devendrabhai','pitroda','1997-05-05',2,'rajkot','2020-01-10',6,6),
('rajan','parekhbhai','patel','1989-05-10',1,'new york','2020-01-10',7,7),
('rajvi','rajbhai','patel','1998-09-16',2,'baroda','2010-03-01',1,1),
('disha','kalpeshbhai','bhatt','1997-01-15',2,'kadi','2015-05-01',4,4),
('darshita','hardikbhai','raval','1994-07-25',2,'bavda','2016-10-01',6,6);

SELECT * FROM Employee;
--Drop table Employee;


--4)SALARY
CREATE TABLE Salary
(
SalaryId INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
AnnualIncome DECIMAL(18,2),
Loans DECIMAL(18,2),
Insurance DECIMAL(18,2),
MonthlyIncome DECIMAL(18,2),
OnHandIncome DECIMAL(18,2),
EmployeeId INT FOREIGN KEY REFERENCES Employee(EmployeeId)
);

SELECT * FROM Salary;

INSERT INTO Salary VALUES
(500000,300000,50000,41666.6667,36000,1),
(450000,350000,45000,37500,32000,2),
(400000,400000,null,33333.3333,28000,3),
(350000,450000,35000,29166.6667,24000,4),
(400000,400000,null,33333.3333,28000,5),
(400000,400000,null,33333.3333,28000,6),
(350000,450000,35000,28166.6667,24000,7),
(450000,350000,45000,37500,32000,8),
(350000,450000,35000,29166.6667,24000,9),
(300000,300000,30000,22500,22000,10);


SELECT * FROM Salary;
--drop table Salary;

--5)PROJECT
CREATE TABLE Project
(
ProjectId INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
ProjectName VARCHAR(100) NOT NULL,
ClientName VARCHAR(100) NOT NULL,
StartDate DATETIME,
EndDate DATETIME2,
Status TINYINT --1 FOR COMPLETED AND 2 FOR INPROGRESS 3 FOR PRNDING
);

SELECT * FROM Project;

INSERT INTO Project VALUES
('EMPLOYEE MANAGEMENT SYSTEM','ishan chavda','2018-01-10','2019-06-10',1),
('CATERING SYSTEM','dhara chavda','2019-05-20','2020-10-10',1),
('ATTENDANCE SYSTEM','himanshu pranami','2018-10-22','2020-10-20',2),
('EXHIBITION MANAGEMENT SYSTEM','hardik sanghvi','2017-05-06','2019-05-03',3),
('LEARNING MANAGEMNT SYSTEM','mayur fefar','2019-01-01','2020-01-01',2),
('HOTEL MANAGEMENT SYSTEM','sanjay parmar','2017-10-05','2019-05-20',2),
('ONLINE SHOPPING SYSTEM','kalpana panchal','2019-01-10','2020-01-10',1);

SELECT * FROM Project;
--drop table Project;

--6)PROJECT-TEAM
CREATE TABLE ProjectTeam
(
ProjectTeamId INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
EmployeeId INT FOREIGN KEY REFERENCES Employee(EmployeeId),
ProjectId INT FOREIGN KEY REFERENCES Project(ProjectId),
StartDate DATETIME2,
EndDate DATETIME,
Status TINYINT --1 FOR COMPLETED AND 2 FOR INPROGRESS 3 FOR PRNDING
);

SELECT * FROM ProjectTeam;

INSERT INTO ProjectTeam VALUES
(1,1,'2018-01-10','2019-06-10',1),
(2,2,'2019-05-20','2020-10-10',1),
(3,3,'2018-10-22','2020-10-20',2),
(4,4,'2017-05-06','2019-05-03',3),
(5,5,'2019-01-01','2020-01-01',2),
(6,6,'2017-10-05','2019-05-20',2),
(7,7,'2019-01-10','2020-01-10',1),
(8,5,'2018-10-22','2020-10-20',2),
(9,4,'2017-05-06','2019-05-03',3),
(10,3,'2019-01-01','2020-01-01',2);

SELECT * FROM ProjectTeam;
--drop table ProjectTeam;

--Data Extraction from above table using diffrent queries:

--1.write down sql query to display count of employee birthdate year wise
Select Year(BirthDate) AS  'year', Count(*) AS 'Number of Employee' FROM Employee GROUP BY BirthDate
ORDER BY BirthDate ASC;

--2.write down sql query to display min monthlyincome 
SELECT MIN(MonthlyIncome) AS Minimum_MonthlyIncome FROM Salary;

--3.write down sql query to display max annualincome 
SELECT MAX(AnnualIncome) AS Maximun_AnnualIncome FROM Salary;

--4.write down sql query to find employee from each department with max monthlyincome
SELECT E.FirstName,T.MonthlyIncome,T.DepartmentId,D.DepartmentName
FROM Employee E
INNER JOIN Salary S ON S.EmployeeId = E.EmployeeId
INNER JOIN Department D ON D.DepartmentId = E.DepartmentId
INNER JOIN (
	SELECT E.DepartmentId, MAX(S.MonthlyIncome)  MonthlyIncome
	FROM Employee E
	INNER JOIN Salary S ON E.EmployeeId = S.EmployeeId
	GROUP BY E.DepartmentId
) T ON T.DepartmentId = E.DepartmentId AND T.MonthlyIncome = S.MonthlyIncome --AND D.DepartmentId = T.DepartmentId
ORDER BY T.DepartmentId


--5.write down sql query to display avg loans
SELECT AVG(Loans) AS Average_Loans FROM Salary;

--6.write down sql query to print how many employee working in "XYZ" project
SELECT COUNT(*) AS Total_Number_Of_Employee FROM Employee 
WHERE EmployeeId In 
(SELECT EmployeeId FROM ProjectTeam WHERE ProjectId IN 
(SELECT ProjectId FROM Project WHERE ProjectName='xyz'));

--FOR EXAMPLE EMS INSTEAD OF XYZ
SELECT COUNT(*) AS Total_Number_Of_Employee FROM Employee 
WHERE EmployeeId In 
(SELECT EmployeeId FROM ProjectTeam WHERE ProjectId IN 
(SELECT ProjectId FROM Project WHERE ProjectName='EMPLOYEE MANAGEMENT SYSTEM'));


--7.write down sql query to find 2nd higest monthlyincome of employee
SELECT  TOP 1 Employee.EmployeeId,Employee.FirstName,Salary.MonthlyIncome FROM Employee 
INNER JOIN Salary ON Employee.EmployeeId = Salary.SalaryId
WHERE Salary.SalaryId IN (SELECT TOP 2 SalaryId FROM Salary ORDER BY MonthlyIncome DESC)
ORDER BY MonthlyIncome;



--8.write down sql query to display firstname,lastname and join year of employee 
--whose join in august month and working in android department
SELECT FirstName,LastName,YEAR(DateOfJoin) AS Year FROM Employee 
INNER JOIN Department ON Department.DepartmentId = Employee.DepartmentId
WHERE month(DateOfJoin)=8  AND  DepartmentName = 'ANDROID';

--9.write down sql query to print all employee whose birthdate will come in next 7 days
SELECT * FROM Employee WHERE BirthDate = CONVERT(DATE,GETDATE()+7);

--10.write down sql query to print list of employee who have joined in last week.
SELECT * FROM Employee WHERE DateOfJoin = CONVERT(DATE,GETDATE()-7);

--11.write down sql query to find the age and print employee detail who have highest salary
--SUBQUERY
SELECT FLOOR(DATEDIFF(DAY, BirthDate, getdate()) / 365) AS AGE, * FROM Employee 
WHERE EmployeeId IN
(SELECT TOP 1 EmployeeId FROM Salary ORDER BY AnnualIncome DESC);

--INNER JOIN
SELECT FLOOR(DATEDIFF(DAY, BirthDate, getdate()) / 365) AS AGE, * FROM Employee 
INNER JOIN Salary ON Employee.EmployeeId = Salary.EmployeeId
WHERE SalaryId IN
(SELECT TOP 1 SalaryId FROM Salary ORDER BY AnnualIncome DESC);	
--------------------
--OTher
use dhrumilraval
--select * from INFORMATION_SCHEMA.TABLES where TABLE_TYPE='BASE TABLE';

--CREATE TABLE Department(
--departmentId int IDENTITY(1,1) PRIMARY KEY ,
--departmentName VARCHAR(50)
--)

--INSERT INTO Department(departmentName)
--VALUES
--('BD'),
--('BA'),
--('account'),
--('net_developers'),
--('mean_stack_developers'),
--('ReactJS_developers'),
--('android_developers'),
--('iOS_developers'),
--('full_stack_developers'),
--('blockchain_developers'),
--('hr_department') ;

--CREATE TABLE Designation(
--designationId int IDENTITY(1,1) Primary KEY,
--designationName varchar(50) 
--)

--INSERT INTO Designation(designationName)
--VALUES
--('trainee'),
--('junior_developer'),
--('senior_developer'),
--('team_lead'),
--('project_manager'),
--('system_analyst'),
--('hr_manager'),
--('ceo');
 

--CREATE TABLE Employee(
--employeeId int IDENTITY(1,1) PRIMARY KEY ,
--firstName VARCHAR(50) NOT  NULL,
--middleName VARCHAR(50) NOT NULL,
--lastName VARCHAR(50) NOT NULL,
--birthDate DATE,
--gender VARCHAR(6),
--address varchar(100),
--dateofJoin date,
--departmentId int FOREIGN KEY REFERENCES Department(departmentId),
--designationId int FOREIGN KEY REFERENCES Designation(designationId),
--)
 

--INSERT INTO Employee(firstName,middleName,lastName,birthDate,gender,address,dateofJoin,departmentId,designationId)
--VALUES
--('dhrumil','ashishbhai','raval','1997-12-2','male','naranpura','1-1-2019',9,1),
--('mohit','rajeshbhai','chauhan','1997-7-27','male','sg highway','10-1-2020',8,1),
--('bhaumin','nileshbhai','shah','1998-8-16','male','naranpura','1-1-2019',9,1),
--('sneh','ashkobhai','raval','1994-4-10','male','prahaladdnagar','1-5-2013',7,5),
--('maulik','rambhai','patel','1992-1-24','male','naroda','1-1-2011',4,3),
--('aenil','sunilbhai','patel','1997-12-11','male','maninager','1-1-2018',1,1),
--('rakesh','rameshbhai','patel','1994-8-5','male','maninager','1-1-2012',4,4),
--('ramesh','rakeshbhai','patel','1994-8-5','male','maninager','1-1-2012',6,5);


--CREATE TABLE Salary(
--salaryId int IDENTITY(1,1) PRIMARY KEY,
--annualIncome DECIMAL(18,2) NOT NULL,
--loans DECIMAL(18,2),
--insurence DECIMAL(18,2),
--monthlyIncome DECIMAL(18,2),
--onHandIncome DECIMAL(18,2),
--employeeId int FOREIGN KEY REFERENCES Employee(employeeId)
--)

--INSERT INTO Salary(annualIncome,loans,insurence,monthlyIncome,onHandIncome,employeeId)
--VALUES
--(600000.00,25000.00,200000.00,50000.00,46500.00,4),
--(420000.00,00.00,150000.00,35000.00,33500.00,5),
--(228000.00,00.00,00.00,19000.00,18800.00,1),		
--(792000.00,00.00,250000.00,66000.00,64800.00,7),
--(696000.00,00.00,250000.00,58000.00,54500.00,8);


--CREATE TABLE Project(
--projectId varchar(10) PRIMARY KEY,
--projectName VARCHAR(60) NOT NULL UNIQUE,
--clientName varchar(100) NOT NULL,
--startDate date,
--endDate date,
--status varchar(20) NOT NULL 
--);


--INSERT INTO Project(projectId,projectName,clientName,startDate,endDate,status)
--VALUES
--('project1','android application school management','xyz','2017-6-10','2018-1-10','completed'),
--('project2','.net website','smitha','2011-3-10','2020-12-31','continue'),
--('project3','ReactJS Hangman Game','nilesh shah','2019-1-1','2019-10-31','completed'),
--('project4','emloyee management application iOS and android','rakesh','2019-2-5','2020-8-10','Continue'),
--('project5','angular site for shoppeing','abcd','2019-12-15','2019-12-15','analysis');


--CREATE TABLE ProjectTeam(
--projectTeamId varchar(8) PRIMARY KEY,
--employeeId int FOREIGN KEY REFERENCES Employee(employeeId),
--projectId varchar(10) FOREIGN KEY REFERENCES Project(projectId),
--startDate date NOT NULL,
--endDate date NOT NULL,
--status varchar(20) NOT NULL 
--);


--INSERT INTO ProjectTeam(projectTeamId,employeeId,projectId,startDate,endDate,status)
--VALUES
--('pt1',4,'project1','2017-8-1','2018-1-10','completed'),
--('pt2',5,'project2','2017-10-10','2020-12-31','continue'),
--('pt3',7,'project3','2019-1-20','2019-10-31','completed'),
--('pt4',7,'project5','2019-12-15','2019-12-15','analysis');

-----INSERT INTO ProjectTeam(projectTeamId,employeeId,projectId,startDate,endDate,status) VALUES('pt5',8,'project1','2017-8-1','2018-1-10','completed')

---- Query for Task4

--1. write down sql query to display count of employee birthdate year wise Result column -> Year,Count of employee

	SELECT COUNT(employeeId) AS SameYearCountEmployee
	,YEAR(birthDate) AS YearOfBirth
	FROM Employee
	GROUP BY YEAR(birthDate);

--2.write down sql query to display min monthlyincome 

	--SELECT MIN(monthlyIncome) as Minimum_Month_Salary_ofEmployee FROM Salary

	SELECT MIN(monthlyIncome) as Minimum_Month_Salary_ofEmployee FROM Salary INNER JOIN Employee ON Salary.employeeId = Employee.employeeId

--3.write down sql query to display max annualincome 

	--SELECT MAX(annualIncome) as HighestIncome FROM Salary;

	SELECT MAX(annualIncome) as HighestIncome From Salary LEFT JOIN Employee ON Salary.employeeId =  Employee.employeeId
	

--4.write down sql query to print each department with max monthlyincome

--doubt

	--SELECT MAX(monthlyIncome) as MAXIncome from Employee e 
	--LEFT JOIN salary s ON s.employeeId=e.employeeId

	--SELECT employeeId from Employee where employeeId In (
	--SELECT departmentId from Department)
	
	
		SELECT D.departmentName ,MAX(S.annualIncome) as MaxSalaryByDepartment
		FROM Employee E 
		JOIN Department D 
		ON D.departmentId = E.departmentId
		JOIN Salary S 
		ON S.employeeId = E.employeeId
		GROUP BY D.departmentId,D.departmentName


--5.write down sql query to display avg loans 
	
	SELECT AVG(loans) AS Average_LoanAmount_Employee FROM Salary INNER JOIN Employee ON Salary.employeeId = Employee.employeeId

	--SELECT AVG(loans) as Average_LoanAmount_Employee FROM Salary;

--6.write down sql query to print how many employee working in "XYZ" project
 
	----using left jion
	SELECT CONCAT(firstName,' ',lastName) AS EmployeeName , p.clientName
	FROM Employee e
	LEFT JOIN ProjectTeam pt ON pt.employeeId = e.employeeId 
	LEFT JOIN  Project p ON p.projectId=pt.projectId 
	WHERE p.clientName='xyz';

	---- using subquery
	--SELECT CONCAT(firstName,' ',lastName) as Employee_whoes_WorkSame_ONProject 
	--FROM Employee 
	--WHERE employeeId IN (SELECT employeeId FROM 
	--ProjectTeam WHERE projectId = 
	--(SELECT projectId FROM Project
	--WHERE clientName='xyz'))


--7.write down sql query to find 2nd higest monthlyincome of employee

	SELECT TOP 1 monthlyIncome  FROM Salary Where
	monthlyIncome <  (SELECT MAX(monthlyIncome) FROM Salary) 
	ORDER BY monthlyIncome DESC

	--SELECT MAX(monthlyIncome) as Second_HighestIncome FROM Salary Where
	--monthlyIncome <  (SELECT MAX(monthlyIncome) FROM Salary) 


--8.write down sql query to display firstname,lastname and join year of employee whose join in august month and working in android department

	SELECT firstName,lastName,dateofJoin FROM Employee WHERE MONTH(birthDate) IN 
		(SELECT MONTH(birthDate) FROM Employee WHERE MONTH(birthDate)=8)
	AND departmentId =
		(SELECT departmentId FROM Department WHERE departmentName='android_developers')

--9.write down sql query to print all employee whose birthdate will come in next 7 days
select convert(varchar(5),getdate(),110)
	-- doubt
	--wrong update
	--SELECT employeeId,firstName,lastName,gender,birthDate,dateofJoin from Employee WHERE convert(varchar(5),birthDate,110) =  convert(varchar(5),getdate()+7,110) ;

	SELECT * FROM Employee

	--- query
		SELECT *
		FROM Employee 
		WHERE DATEADD( Year, DATEPART( Year, GETDATE()) - DATEPART( Year, birthDate), birthDate)   -- from date to 7days
		BETWEEN CONVERT( DATE, GETDATE()) 
		AND CONVERT( DATE, GETDATE() + 3);


--10.write down sql query to print list of employee who have joined in last week.


	SELECT employeeId,firstName,lastName,gender,birthDate,dateofJoin FROM Employee WHERE dateofJoin =  CONVERT(date,getdate()-7) ;


--11.write down sql query to find the age and print employee detail who have highest salary Result column -> Age, employee details 
	
	SELECT TOP 1  DATEDIFF(YEAR,birthDate,CONVERT(date,getdate())) as HighestSalary_Employee_Age,
	e.firstName,e.birthDate,s.annualIncome
	FROM Employee e INNER JOIN SALARY S 
	ON e.employeeId = s.salaryId order by s.annualIncome desc
	

	--SELECT DATEDIFF(YEAR,birthDate,CONVERT(date,getdate())) as HighestSalary_Employee_Age,* from Employee where
	--employeeId = ( SELECT employeeId from salary where annualIncome =
	--	(SELECT  MAX(annualIncome) from Salary))

--- same output using order by
	--SELECT DATEDIFF(YEAR,birthDate,CONVERT(date,getdate())) as HighestSalary_Employee_Age from Employee where employeeId = (
	--SELECT TOP 1 employeeId FROM Salary order by annualIncome desc)
